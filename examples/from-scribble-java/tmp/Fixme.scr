

//http://sandbox.kidstrythisathome.com/erdos/


module Fixme;


  // TODO: (re)connect/wrap, e.g. SMTP

  // TODO: "introduces" well-formedness?
  // e.g. "A from B to C;"
  // e.g. "a from A to B; A[a] from B to C;"
  // e.g. connect A to B; connect B to C; connect C to A;  // connect A to C would be bad
  //.. expliconn+introduces vs. delegation -- MPST with explicit (shared/sess) channels

  // TODO: API gen
  // - connect/disconnect -- need to make backwards compatible with non-explicit
  //   -- non-explicit just has implicit initial connects -- just need to make sure no deadlock
  //   -- consider accept for callbacks?
  // - factor out Scribble abstract transport wrappers with language-specific plugins; take as parameter for "wrap" action
  // - non-det EFSMs -- minimisation will remove all mergeable non-det actions, but non-mergeable non-det actions can exist due to explicit connect


//.. output and connect can be mixed in a state... check where getStateKind used for any problems
//    -- getTakeable in WFConfig for model building (but maybe ends up OK, just treat connect/accept the same way?)
//    -- main approach should be generally consier mixed send/connect states, but differentiate connect for input blocking detection
//.. check orphan messages wrt connect/accept states -- maybe OK, orphan check does consider connectedness


// - scrib assertions for model checker -- check state visited?
// - parameterise subprotos on protos?


// FIXME: .. refactor interfaces for model building/checking/minimising/etc into state classes (make subclasses of Model/EndpointState -- cf. ast/del)


// ..is branching on accept+message more expressive than accept followed by branch?  i.e. can connect always be "factored up" before the choice? -- maybe depends on interplay with select fairness (want to use connect to nest role scope inside choice case to avoid assuming fairness, but this can conflict with non-det accept?)

//*** TODO introduces -- or explicit shared channel/port creation and passing ("open")

// DONE: delete noLive or add to fair check
// DONE: decouple branch API gen from I/O i/f's -- duplicate enum in concrrete states? -- removed dependencies on I/O i/f's for Branch APIs where I/O i/f generation is disabled
// DONE: I/O i/f name max length -- 255 Linux/Windows/etc max file name length

// CHECKME: check for (not yet supported) deleg actions in API gen
// CHECKME: delegation type payload projection
// CHECKME: '.' in Name constructor args -- no: rename constructor arg to simpname (cf SessionTypeFactory)
// MainContext.newJob -- move MainContext to core?

// FIXME: Module.getGlobal/LocalProtocolDecl


// TODO: test API gen for (fair) SupplierInfo
// TODO: test connect/wrap API gen for SMTP
// TODO: MT/EDP server examples



/*
global protocol Proto1(role A, role B, role C)
{
  choice at A
  {
    1() from A to B;
    3() from B to C;
    4() from A to C;  // TODO: standard syntactic merge
  }
  or
  {
    2() from A to B;
    3() from B to C;
    5() from A to C;
  }
}
//*/


/*
global protocol Proto1(role A, role B)
{
  (Proto2@C) from A to B;   // FIXME: should not be aux? (or if aux should check WF as root?)
}

aux global protocol Proto2(role C, role D)
{
  1() from C to D;
}
//*/


/*
explicit global protocol Proto(role A, role B, role C, role D)
{
  connect A to B;
  connect C to D;
  //... A, B  // FIXME: investigate
  //... C, D
}
//*/


/*
explicit global protocol Proto(role A, role B, role C, role D)
{
  connect A to B;
  connect A to C;
  connect A to D;
  connect C to D;
  disconnect A and C;  // FIXME: investigate
  disconnect A and D;
}
//*/


/*
global protocol Proto1(role A, role B, role C, role D)
{
  rec X
  {
    choice at A
    {
      m1(Int) from A to B;
      continue X;
      //m4(int) from A to B;
    }
    or
    {
      m2(Int) from A to B;
      //m3(int) from A to B;
    }
    1() from C to D;  // FIXME: wrong enabled check result -- maybe not? under unfolding it is captured inside the choice
  }
  //* /
}
//*/

